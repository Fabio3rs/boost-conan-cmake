# Docker Compose for boost-conan-cmake Development and Runtimeversion: '3.8'services:  # Main application - builds and packages automatically  app:    build:      context: .      dockerfile: Dockerfile      target: runtime    image: boost-conan-cmake:latest    container_name: boost-conan-cmake-app    restart: unless-stopped    environment:      - LAMBDA_TASK_ROOT=/var/task      - API_INSTANCE=default    security_opt:      - no-new-privileges:true    cap_drop:      - ALL    cap_add:      - CHOWN      - SETGID      - SETUID    read_only: true    tmpfs:      - /tmp:noexec,nosuid,size=100m    networks:      - app-network    healthcheck:      test: ["/var/task/bin/HelloWorld", "--version"]      interval: 30s      timeout: 10s      retries: 3      start_period: 40s  # Development environment with full toolchain  dev:    build:      context: .      dockerfile: Dockerfile      target: builder    image: boost-conan-cmake:dev    container_name: boost-conan-cmake-dev    volumes:      - .:/home/builder/project      - conan-cache:/home/builder/.conan2      - build-cache:/home/builder/project/build    working_dir: /home/builder/project    command: /bin/bash    stdin_open: true    tty: true    environment:      - CC=clang-18      - CXX=clang++-18      - CXXFLAGS=-std=c++20 -Wall -Wextra -Wpedantic -g    networks:      - app-network  # Security scanner service for CI/CD  security-scanner:    build:      context: .      dockerfile: Dockerfile.security    image: boost-conan-cmake:security    container_name: boost-conan-cmake-security    volumes:      - .:/workspace:ro      - security-reports:/reports    working_dir: /workspace    environment:      - PYTHONPATH=/workspace    command: >      sh -c "        python3 scripts/cve_security_check.py --output /reports/cve_report.txt &&        ./scripts/security_audit.sh /workspace /reports/security_audit.txt &&        echo 'Security scan completed. Reports available in /reports/'      "    networks:      - app-network    profiles:      - securitynetworks:  app-network:    driver: bridge    ipam:      config:        - subnet: 172.20.0.0/16volumes:  conan-cache:    driver: local    driver_opts:      type: none      o: bind      device: ${HOME}/.conan2  build-cache:    driver: local  security-reports:    driver: local