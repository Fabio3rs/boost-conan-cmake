# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install Conan
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install conan>=2.0.0

    - name: Cache Conan
      id: cache-conan
      uses: actions/cache@v4
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-conan2-build-cache

    - name: Setup Conan profile
      run: |
        conan profile detect --force

    - name: Set up Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: latest
        platform: x64

    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Install Conan Dependencies
      run: |
        mkdir -p build
        cd build
        conan install .. --output-folder=. --build=missing --settings=build_type=${{env.BUILD_TYPE}}

    - name: Configure CMake
      env:
        CC: /usr/bin/clang
        CXX: /usr/bin/clang++
      # Configure CMake in a 'build' subdirectory using conan toolchain
      run: |
        cd build
        cmake .. -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_CXX_FLAGS="-std=c++20 -Wall -Wextra"

    - name: Build
      env:
        CC: /usr/bin/clang
        CXX: /usr/bin/clang++
      # Build your program with the given configuration
      run: |
        cd build
        cmake --build . --config ${{env.BUILD_TYPE}} -j$(nproc)

    - name: Package with Dependencies
      run: |
        chmod +x scripts/packager
        ./scripts/packager --default-libc build/HelloWorld
        echo "ðŸ“¦ Package contents:"
        ls -la built/
        echo "ðŸš€ Lambda package ready for deployment"

    - name: Upload Lambda Package
      uses: actions/upload-artifact@v4
      with:
        name: lambda-package-${{ github.run_number }}
        path: built/
        retention-days: 30

    - name: Test
      working-directory: build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

