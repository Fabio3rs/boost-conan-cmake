name: Security Scan

on:
  # Run security scan on every push to main branch
  push:
    branches: [ main, master ]

  # Run security scan on pull requests
  pull_request:
    branches: [ main, master ]

  # Allow manual trigger
  workflow_dispatch:

  # Run weekly security scan every Monday at 2 AM UTC
  schedule:
    - cron: '0 2 * * 1'

jobs:
  security-scan:
    runs-on: ubuntu-24.04

    permissions: write-all

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        # Fetch full history for submodule analysis
        fetch-depth: 0
        # Initialize submodules
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl grep jq
        # Install build dependencies matching the Dockerfile and build workflows
        sudo apt-get install -y --no-install-recommends build-essential
        sudo apt-get install -y pkg-config cmake ninja-build
        # Install dependencies for C++ dependency analysis
        sudo apt-get install -y gcc g++ clang cppcheck
        # Install library development packages that the security scripts analyze
        sudo apt-get install -y libssl-dev libcurl4-openssl-dev
        sudo apt-get install -y libmysqlcppconn-dev mariadb-client
        sudo apt-get install -y libpoco-dev libgtest-dev
        sudo apt-get install -y rapidjson-dev libxml2-dev
        # Install tools needed for package analysis
        sudo apt-get install -y dpkg-dev apt-utils

    - name: Install additional security tools
      run: |
        # Install hadolint for Dockerfile analysis
        wget -O /tmp/hadolint "https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64"
        sudo install /tmp/hadolint /usr/local/bin/
        
        # Install gitleaks for secrets scanning using GitHub CLI for reliable latest version
        # GitHub Actions runners have gh CLI pre-installed and authenticated
        GITLEAKS_VERSION=$(gh release view --repo gitleaks/gitleaks --json tagName --jq '.tagName')
        echo "Installing gitleaks version: $GITLEAKS_VERSION"
        wget -O /tmp/gitleaks.tar.gz "https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_linux_x64.tar.gz"
        tar -xzf /tmp/gitleaks.tar.gz -C /tmp
        sudo install /tmp/gitleaks /usr/local/bin/
        
        # Install semgrep for static analysis
        python3 -m pip install semgrep
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Make scripts executable
      run: |
        chmod +x scripts/cve_security_check.py
        chmod +x scripts/security_audit.sh

    - name: Run CVE Security Check
      id: cve-check
      run: |
        echo "::group::CVE Security Check"
        python3 scripts/cve_security_check.py --format json --output security_cve.json
        python3 scripts/cve_security_check.py --format text --output security_cve.txt
        echo "::endgroup::"
      continue-on-error: true

    - name: Run Security Audit
      id: security-audit
      run: |
        echo "::group::Security Audit"
        ./scripts/security_audit.sh . security_audit.txt
        echo "::endgroup::"
      continue-on-error: true

    - name: Run Additional Security Tools
      id: additional-security
      run: |
        echo "::group::Dockerfile Analysis with Hadolint"
        if [ -f "Dockerfile" ]; then
          hadolint Dockerfile > hadolint_results.txt 2>&1 || echo "Hadolint found issues"
          echo "Hadolint results:"
          cat hadolint_results.txt
        fi
        echo "::endgroup::"
        
        echo "::group::Secrets Scanning with Gitleaks"
        gitleaks detect --source . --report-format json --report-path gitleaks_report.json --verbose || echo "Gitleaks scan completed"
        echo "::endgroup::"
        
        echo "::group::Static Analysis with Semgrep"
        semgrep --config=auto --json --output=semgrep_report.json . || echo "Semgrep scan completed"
        echo "::endgroup::"
        
        echo "::group::C++ Static Analysis with Cppcheck"
        if [ -d "src" ]; then
          cppcheck --enable=all --json --output-file=cppcheck_report.json src/ 2>/dev/null || echo "Cppcheck scan completed"
        fi
        echo "::endgroup::"
      continue-on-error: true

    - name: Parse Security Results
      id: parse-results
      run: |
        echo "::group::Parsing Security Results"
        
        # Parse CVE results
        CVE_CRITICAL=$(jq -r '.summary.critical_count // 0' security_cve.json 2>/dev/null || echo "0")
        CVE_HIGH=$(jq -r '.summary.high_count // 0' security_cve.json 2>/dev/null || echo "0")
        CVE_MEDIUM=$(jq -r '.summary.medium_count // 0' security_cve.json 2>/dev/null || echo "0")
        CVE_LOW=$(jq -r '.summary.low_count // 0' security_cve.json 2>/dev/null || echo "0")
        
        # Parse additional security tools
        HADOLINT_ISSUES=$(wc -l < hadolint_results.txt 2>/dev/null || echo "0")
        GITLEAKS_SECRETS=$(jq '. | length' gitleaks_report.json 2>/dev/null || echo "0")
        SEMGREP_FINDINGS=$(jq '.results | length' semgrep_report.json 2>/dev/null || echo "0")
        CPPCHECK_ISSUES=$(jq '.[] | length' cppcheck_report.json 2>/dev/null || echo "0")
        
        # Set outputs
        echo "cve_critical=$CVE_CRITICAL" >> $GITHUB_OUTPUT
        echo "cve_high=$CVE_HIGH" >> $GITHUB_OUTPUT  
        echo "cve_medium=$CVE_MEDIUM" >> $GITHUB_OUTPUT
        echo "cve_low=$CVE_LOW" >> $GITHUB_OUTPUT
        echo "hadolint_issues=$HADOLINT_ISSUES" >> $GITHUB_OUTPUT
        echo "gitleaks_secrets=$GITLEAKS_SECRETS" >> $GITHUB_OUTPUT
        echo "semgrep_findings=$SEMGREP_FINDINGS" >> $GITHUB_OUTPUT
        echo "cppcheck_issues=$CPPCHECK_ISSUES" >> $GITHUB_OUTPUT
        
        # Calculate total security score
        TOTAL_CRITICAL=$((CVE_CRITICAL))
        TOTAL_HIGH=$((CVE_HIGH))
        TOTAL_MEDIUM=$((CVE_MEDIUM + HADOLINT_ISSUES + SEMGREP_FINDINGS + CPPCHECK_ISSUES))
        TOTAL_LOW=$((CVE_LOW + GITLEAKS_SECRETS))
        
        echo "total_critical=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
        echo "total_high=$TOTAL_HIGH" >> $GITHUB_OUTPUT
        echo "total_medium=$TOTAL_MEDIUM" >> $GITHUB_OUTPUT
        echo "total_low=$TOTAL_LOW" >> $GITHUB_OUTPUT
        
        echo "::endgroup::"
        # Extract vulnerability count from JSON
        if [ -f security_cve.json ]; then
          VULN_COUNT=$(python3 -c "import json; data=json.load(open('security_cve.json')); print(data.get('summary', {}).get('vulnerabilities_found', 0))")
          echo "vuln_count=$VULN_COUNT" >> $GITHUB_OUTPUT

          HIGH_COUNT=$(python3 -c "import json; data=json.load(open('security_cve.json')); print(data.get('summary', {}).get('high_count', 0))")
          echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT

          CRITICAL_COUNT=$(python3 -c "import json; data=json.load(open('security_cve.json')); print(data.get('summary', {}).get('critical_count', 0))")
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        else
          echo "vuln_count=0" >> $GITHUB_OUTPUT
          echo "high_count=0" >> $GITHUB_OUTPUT
          echo "critical_count=0" >> $GITHUB_OUTPUT
        fi

    - name: Generate Security Summary
      run: |
        echo "# 🛡️ Security Scan Results" > security_summary.md
        echo "" >> security_summary.md
        echo "**Scan Date:** $(date)" >> security_summary.md
        echo "**Commit:** ${{ github.sha }}" >> security_summary.md
        echo "" >> security_summary.md

        if [ -f security_cve.json ]; then
          echo "## Summary" >> security_summary.md
          echo "- **Total Vulnerabilities:** ${{ steps.parse-results.outputs.vuln_count }}" >> security_summary.md
          echo "- **Critical:** ${{ steps.parse-results.outputs.critical_count }}" >> security_summary.md
          echo "- **High:** ${{ steps.parse-results.outputs.high_count }}" >> security_summary.md
          echo "" >> security_summary.md

          if [ "${{ steps.parse-results.outputs.vuln_count }}" -gt 0 ]; then
            echo "## 🚨 Action Required" >> security_summary.md
            echo "Vulnerabilities detected. Please review the detailed reports." >> security_summary.md
            echo "" >> security_summary.md
          else
            echo "## ✅ No Critical Issues" >> security_summary.md
            echo "No critical security vulnerabilities detected." >> security_summary.md
            echo "" >> security_summary.md
          fi

          echo "## Files Generated" >> security_summary.md
          echo "- \`security_cve.json\` - Detailed CVE analysis" >> security_summary.md
          echo "- \`security_cve.txt\` - Human-readable CVE report" >> security_summary.md
          echo "- \`security_audit.txt\` - Comprehensive security audit" >> security_summary.md
        fi

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          security_cve.json
          security_cve.txt
          security_audit.txt
          security_report_detailed.json
          hadolint_results.txt
          gitleaks_report.json
          semgrep_report.json
          cppcheck_report.json
        retention-days: 30

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const critical = ${{ steps.parse-results.outputs.total_critical || 0 }};
          const high = ${{ steps.parse-results.outputs.total_high || 0 }};
          const medium = ${{ steps.parse-results.outputs.total_medium || 0 }};
          const low = ${{ steps.parse-results.outputs.total_low || 0 }};
          
          const hadolint = ${{ steps.parse-results.outputs.hadolint_issues || 0 }};
          const gitleaks = ${{ steps.parse-results.outputs.gitleaks_secrets || 0 }};
          const semgrep = ${{ steps.parse-results.outputs.semgrep_findings || 0 }};
          const cppcheck = ${{ steps.parse-results.outputs.cppcheck_issues || 0 }};
          
          let status = '🟢 PASSED';
          if (critical > 0) status = '🔴 FAILED - CRITICAL';
          else if (high > 0) status = '🟡 WARNING - HIGH';
          else if (medium > 5) status = '🟡 WARNING - MULTIPLE MEDIUM';

          let comment = `# 🛡️ Security Scan Results - ${status}\n\n`;
          comment += `## Summary\n`;
          comment += `- **Critical**: ${critical}\n`;
          comment += `- **High**: ${high}\n`;
          comment += `- **Medium**: ${medium}\n`;
          comment += `- **Low**: ${low}\n\n`;
          
          comment += `## Tool Results\n`;
          comment += `- **CVE Scanner**: ${critical + high} critical/high vulnerabilities\n`;
          comment += `- **Hadolint**: ${hadolint} Dockerfile issues\n`;
          comment += `- **Gitleaks**: ${gitleaks} potential secrets\n`;
          comment += `- **Semgrep**: ${semgrep} code security findings\n`;
          comment += `- **Cppcheck**: ${cppcheck} static analysis issues\n`;
          comment += `- **Trivy**: Container vulnerability scan completed\n\n`;
          
          comment += `📋 **Detailed reports available in workflow artifacts**\n`;
          
          // Add appropriate action message based on vulnerability count
          const vulnCount = '${{ steps.parse-results.outputs.vuln_count }}';
          if (critical > 0) {
            comment += `\n⚠️ **Action Required**: Critical vulnerabilities detected. Please review and fix before merging.\n`;
          } else if (vulnCount > 0) {
            comment += `\n⚠️ **Security issues detected.** Please review before merging.\n`;
          } else {
            comment += `\n✅ **No critical security issues detected.**\n`;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Set Job Status
      run: |
        TOTAL_CRITICAL=${{ steps.parse-results.outputs.total_critical || 0 }}
        TOTAL_HIGH=${{ steps.parse-results.outputs.total_high || 0 }}
        TOTAL_MEDIUM=${{ steps.parse-results.outputs.total_medium || 0 }}
        TOTAL_LOW=${{ steps.parse-results.outputs.total_low || 0 }}
        
        GITLEAKS_SECRETS=${{ steps.parse-results.outputs.gitleaks_secrets || 0 }}

        echo "🛡️ Security Scan Summary:"
        echo "Critical: $TOTAL_CRITICAL"
        echo "High: $TOTAL_HIGH" 
        echo "Medium: $TOTAL_MEDIUM"
        echo "Low: $TOTAL_LOW"
        echo "Potential Secrets: $GITLEAKS_SECRETS"

        # Fail the job if critical vulnerabilities are found
        if [ "$TOTAL_CRITICAL" -gt 0 ]; then
          echo "❌ Critical vulnerabilities detected!"
          exit 1
        elif [ "$TOTAL_HIGH" -gt 0 ]; then
          echo "⚠️ High severity vulnerabilities detected"
          echo "Consider addressing these before release"
        elif [ "$GITLEAKS_SECRETS" -gt 0 ]; then
          echo "⚠️ Potential secrets detected in code"
          echo "Review gitleaks report and remove any exposed secrets"
        elif [ "$TOTAL_MEDIUM" -gt 10 ]; then
          echo "⚠️ Many medium severity issues detected"
          echo "Consider addressing the most critical ones"
        else
          echo "✅ Security scan passed - no critical issues detected"
        fi

  # Container image vulnerability scanning
  container-security:
    runs-on: ubuntu-24.04
    if: github.event_name != 'schedule' # Skip on scheduled runs to save resources

    permissions: write-all

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install JSON processing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Extract container images from Dockerfile
      id: extract-images
      run: |
        echo "Extracting base images from Dockerfile..."
        BASE_IMAGES=$(grep -E "^FROM " Dockerfile | awk '{print $2}' | tr '\n' ' ')
        echo "Found images: $BASE_IMAGES"
        echo "base_images=$BASE_IMAGES" >> $GITHUB_OUTPUT

        # Create individual image outputs for matrix scanning
        echo "ubuntu_image=$(grep -E "^FROM ubuntu" Dockerfile | awk '{print $2}' | head -1)" >> $GITHUB_OUTPUT
        echo "alpine_image=$(grep -E "^FROM alpine" Dockerfile | awk '{print $2}' | head -1)" >> $GITHUB_OUTPUT

    - name: Scan Ubuntu base image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.extract-images.outputs.ubuntu_image }}
        format: 'sarif'
        output: 'ubuntu-image-vulnerabilities.sarif'
        exit-code: '0'
      continue-on-error: true

    - name: Scan Alpine runtime image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.extract-images.outputs.alpine_image }}
        format: 'sarif'
        output: 'alpine-image-vulnerabilities.sarif'
        exit-code: '0'
      continue-on-error: true

    - name: Generate container vulnerability report
      run: |
        echo "# 🐳 Container Image Vulnerability Report" > container-security-report.md
        echo "" >> container-security-report.md
        echo "**Scan Date:** $(date)" >> container-security-report.md
        echo "**Images Analyzed:**" >> container-security-report.md
        echo "- Build Image: ${{ steps.extract-images.outputs.ubuntu_image }}" >> container-security-report.md
        echo "- Runtime Image: ${{ steps.extract-images.outputs.alpine_image }}" >> container-security-report.md
        echo "" >> container-security-report.md

        # Check if SARIF files contain vulnerabilities
        if [ -f ubuntu-image-vulnerabilities.sarif ]; then
          UBUNTU_VULNS=$(jq -r '.runs[0].results | length' ubuntu-image-vulnerabilities.sarif 2>/dev/null || echo "0")
          echo "- **Ubuntu vulnerabilities found:** $UBUNTU_VULNS" >> container-security-report.md
        fi

        if [ -f alpine-image-vulnerabilities.sarif ]; then
          ALPINE_VULNS=$(jq -r '.runs[0].results | length' alpine-image-vulnerabilities.sarif 2>/dev/null || echo "0")
          echo "- **Alpine vulnerabilities found:** $ALPINE_VULNS" >> container-security-report.md
        fi

        echo "" >> container-security-report.md
        echo "## 📊 Docker Hub Security Status" >> container-security-report.md
        echo "Check Docker Hub for official vulnerability reports:" >> container-security-report.md
        echo "- [Ubuntu 24.04 Security](https://hub.docker.com/_/ubuntu)" >> container-security-report.md
        echo "- [Alpine 3.19 Security](https://hub.docker.com/_/alpine)" >> container-security-report.md
        echo "" >> container-security-report.md
        echo "## 🔧 Recommendations" >> container-security-report.md
        echo "- Monitor for newer patch versions of base images" >> container-security-report.md
        echo "- Consider using distroless images for smaller attack surface" >> container-security-report.md
        echo "- Regularly update base image versions" >> container-security-report.md

    - name: Run filesystem vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'filesystem-vulnerabilities.sarif'
        exit-code: '0' # Don't fail the job

    - name: Upload container vulnerability results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ubuntu-image-vulnerabilities.sarif
      continue-on-error: true

    - name: Upload Alpine vulnerability results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: alpine-image-vulnerabilities.sarif
      continue-on-error: true

    - name: Upload filesystem scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: filesystem-vulnerabilities.sarif
      continue-on-error: true # Don't fail if SARIF upload is not available

    - name: Upload all container security reports as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-security-scan-${{ github.run_number }}
        path: |
          *-vulnerabilities.sarif
          container-security-report.md
        retention-days: 30
