name: Docker Build and Package

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      run: |
        echo "🐳 Building Docker image with packaging..."
        docker build -t boost-conan-cmake:latest .
        echo "✅ Docker build completed"

    - name: Test Docker Container
      run: |
        echo "🧪 Testing Docker container..."
        docker run --rm \
          -e LAMBDA_TASK_ROOT=/var/task \
          -e API_INSTANCE=test \
          boost-conan-cmake:latest --help
        echo "✅ Container test completed"

    - name: Extract Package from Docker
      run: |
        echo "📦 Extracting Lambda package from Docker image..."
        # Create container without starting it
        CONTAINER_ID=$(docker create boost-conan-cmake:latest)
        
        # Extract the packaged files
        docker cp $CONTAINER_ID:/var/task ./lambda-package
        
        # Clean up
        docker rm $CONTAINER_ID
        
        echo "📋 Package contents:"
        ls -la lambda-package/
        echo ""
        echo "🚀 Bootstrap script:"
        cat lambda-package/bootstrap
        echo ""
        echo "📊 Package size: $(du -sh lambda-package | cut -f1)"

    - name: Upload Lambda Package
      uses: actions/upload-artifact@v4
      with:
        name: lambda-package-${{ github.run_number }}
        path: lambda-package/
        retention-days: 90

    - name: Create Release Package (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd lambda-package
        zip -r ../lambda-deployment-${{ github.ref_name }}.zip .
        cd ..
        echo "📦 Release package created: lambda-deployment-${{ github.ref_name }}.zip"
        echo "📊 Package size: $(du -sh lambda-deployment-${{ github.ref_name }}.zip | cut -f1)"

    - name: Create Release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## 🚀 Lambda Deployment Package
          
          This release includes an AWS Lambda-ready deployment package built with Docker.
          
          **Package includes:**
          - Application binary in `bin/`
          - All required libraries in `lib/` (Ubuntu glibc for compatibility)
          - Lambda-compatible `bootstrap` script
          
          ## 📦 Deployment Instructions
          
          1. Download `lambda-deployment-${{ github.ref_name }}.zip`
          2. Upload to AWS Lambda as a custom runtime
          3. Set handler to any value (bootstrap script handles execution)
          4. Configure environment variables as needed
          
          ## 🔧 Technical Details
          
          - Built on Ubuntu 24.04 with Clang 18
          - Includes full glibc for maximum compatibility
          - C++20/23 compliant following Core Guidelines
          - Multi-stage Docker build for optimized runtime
        draft: false
        prerelease: false

    - name: Upload Release Asset (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./lambda-deployment-${{ github.ref_name }}.zip
        asset_name: lambda-deployment-${{ github.ref_name }}.zip
        asset_content_type: application/zip
